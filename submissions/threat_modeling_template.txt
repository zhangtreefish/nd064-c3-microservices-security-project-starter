Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.
1.Spoofing: a sidecar container has intentional access to the primary container's namespace and may spoof the namespace used by the primary container;
JNDI is a well-researched attack surface in Java, and is possible in saffected version of log4j (2.0 <= log4j <= 2.15.0) per CVE-2021-44228
2.Tampering: as in Apache Log4j2 Remote Code Execution vulnerability CVE-2021-44228
3.Repudiation: Malicious images may be committed without authorization by an attacker into DOCKER REGISTRY
4.Information Disclosure: sensitive data such as secrets may be left in the container image in DOCKER REGISTRY
5.Denial of Service: as in Apache log4j2 denial-of-service vulnerability CVE-2021-45105: "Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3) 
did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a 
denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0 and 2.12.3."
6.Elevation of Privilege: Daemon privilege may be escalated if a user name is not defined in DOCKER HOST and the container runs as root, 
which gives access to any other container on the same host, leading to isolation tampering. CVE-2019-5736 allows a container process running as root to 
escape its container and gain root access to the host and all containers running on that host.

Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.
7.Spoofing:  kube-proxy, a core component, has a localhost boundary bypass vulnerability (CVE-2020-8558): For example, 
if a cluster administrator runs a TCP service on a node that listens on 127.0.0.1:1234, because of this security vulnerability, 
the TCP service may be accessed by other hosts in the same LAN as the node or by containers running on the same node as the service. 
If the TCP service on port 1234 did not require additional authentication (because it assumed that only other localhost processes 
could reach it), the service could be vulnerable to attacks that use this security vulnerability.
8.Tampering: The configuration of etcd may be tampered with by an attacker,
9.Repudiation: kubelet authentication should be TLS to prevent unwanted changes
10.Information Disclosure: --kubeconfig should be set to permissions 644 or less permissive to harden kube-proxy.
11.Denial of Service: --protect-kernel-defaults should be true for kubelet to avoid DoS attack
12.Elevation of Privilege:  privilege can be abused by using the --privileged flag, affecting kube-apiserver.

Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).
